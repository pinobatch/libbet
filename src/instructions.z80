;
; Instruction screen and attract mode for GB port of Magic Floor
;
; Copyright 2002, 2012 Martin Korth [concept]
; Copyright 2018, 2020 Damian Yerrick [program]
;
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"
include "src/global.inc"

def LF equ $0A
def FF equ $0C
def ABTNSYM equ $18
def BBTNSYM equ $19
def DPADSYM equ $7F

section "instructions", ROM0

; Sets up a 128-pixel-wide VWF window on rows 1 to B and B+2 to 17
; @param B number of rows before first blank row
vwf_page_init::
  ld a,16  ; calculate num
  sub b
  ld c,a
  push bc

  call lcd_off
  xor a
  ldh [rSCX],a
  ld a,4
  ldh [rSCY],a
  ld a,%00001100
  call set_bgp

  ; Clear CHR banks 1 and 2
  ld de,$8800
  ld h,e
  ld bc,256*16
  call memset
  ; and the tilemap immediately following
  ld h,$6F
  ld bc,32*19
  call memset
  call clear_gbc_attr

  ; Fill top rows, centered horizontally and starting on
  ; the second row of the first BG
  pop bc
  push bc
  ldxy hl, 10 - vwf_page_width/2, 1, _SCRN0
  ld de,32 - vwf_page_width
  ld a,vwf_page_first_tileid
  call .filltilemaploop
  ld bc,32  ; skip a row
  add hl,bc
  pop bc
  ld b,c
  .filltilemaploop:
    ld c,vwf_page_width
    call memset_inc
    add hl,de
    dec b
    jr nz,.filltilemaploop

  ret

do_instructions::
  ld b, 28
  call sgb_set_palette_b
  ld b, 3
  call vwf_page_init
  xor a
  ld [cursor_x],a
.page:

  ; Draw the text
  call lcd_off
  ld a,[cursor_x]
  ld de,pages
  call de_index_a
  ld de,CHRRAM0 + vwf_page_first_tileid * 16
  ; HL: text pointer; DE: VRAM pointer
  .lineloop:
    push hl
    call vwfClearBuf
    pop hl
    push de
    ld b,0
    call vwfPuts
    pop de
    push hl
    ld h,d
    ld l,e
    ld bc,vwf_page_width
    call vwfPutBuf03_lenC
    ld d,h
    ld e,l
    pop hl
    ld a,[hl+]
    or a
    jr nz,.lineloop

  call vwfClearBuf
  jr .clrresttest
  .clrrestloop:
    ld h,0
    ld bc,vwf_page_width*16
    call memset
  .clrresttest:
    ld hl,$10000-(CHRRAM0 + ((16 * vwf_page_width) + vwf_page_first_tileid) * 16)
    add hl,de
    jr nc,.clrrestloop

  ld a,LCDCF_ON|LCDCF_BGON|LCDCF_BG8800|LCDCF_BG9800
  ld [vblank_lcdc_value],a
  ldh [rLCDC],a

.loop:
  call wait_vblank_irq
  call audio_update
  call read_pad
  ld a,[new_keys]
  ld b,a
  ld a,[cursor_x]
  ld c,a

  ; Page movement
  ld a,PADF_RIGHT|PADF_A
  and b
  ld a,c
  jr z,.notRight
  cp (pages_end-pages)/2-1
  jr nc,.notRight
    inc a
  .notRight:
  bit PADB_LEFT, b
  jr z,.notLeft
  or a
  jr z,.notLeft
    dec a
  .notLeft:
  cp c
  jr z,.notRedraw
    ld [cursor_x],a
    jp .page
  .notRedraw:

  ld a,PADF_START|PADF_SELECT
  and b
  ret nz
  bit PADB_A,b
  jr z,.loop
  ; A was pressed; return
  ld a,c
  cp (pages_end-pages)/2-1
  jr c,.loop
  ret

section "instructionstxt", ROM0

pages:
 dw page1txt  ;, page2txt, page3txt
pages_end:

page1txt:
 db LF
 db "Libbet and the Magic Floor",LF
 db "v0.08 (2024-01-02)",LF
 ; Row skipped because B=3
 ; Can't cut 1 line here because "rearranging" and "passage" are long
 db "One day, Libbet was",LF
 db "rearranging her basement",LF
 db "when she discovered a",LF
 db "passage to an empty",LF
 db "hall whose floor had a",LF
 db "peculiar pattern. She",LF
 db "rolled in to investigate.",LF
 db LF
 db "Direction: roll",LF
 db "A+direction: jump",LF
 db LF
 db "Select: demo | Start: play",0


; Attract mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def STATUS_BLANK equ $F7

section "attractstate", WRAM0
attract_src_ptr:: ds 2
attract_vwf_tile_id:: ds 1  ; $80 through $BF
attract_vwf_x:: ds 1  ; X = $FF and tile id < $C0 means a clear is in progress

; While writing text:
; attract_vwf_x in 0-7, attract_vwf_tile_id in $80-$BF
; While clearing:
; attract_vwf_x = $FF, attract_vwf_tile_id in $80-$BF

section "attractcode", ROM0

attract_reload_vwf_nametable:
  ld de, popslide_used
  ld a, [de]
  ld e, a
  ld hl, attract_restore_attr_stripe
  ld bc, attract_restore_attr_stripe_end-attract_restore_attr_stripe
  call memcpy
  ld h, d
  ld l, e
  ; load tile values
  ldxy de, 2, 12
  ld a, $80
  .rowloop
    ld [hl], e
    inc l
    ld [hl], d
    inc l
    ld [hl], 16-1
    inc l
    ld [hl], 0
    inc l
    ld c, 16
    call memset_inc
    ld c, a
    ld a, e
    add 32
    ld e, a
    ld a, c
    cp $C0
    jr c, .rowloop
  ld a, l
  ld [popslide_used], a
  ret


attract_init_vram::
  ; Extend status bar
  ldxy hl, 0, 12
  ld a,STATUS_BLANK
  ld c,32*4
  call memset_tiny

  ; Set up VWF canvas on extended status bar
  call attract_reload_vwf_nametable
  call popslide_terminate_blit

  ; Clear VWF canvas
  ld hl, CHRRAM1
  xor a
  ld b, a
  .clrcanvasloop:
    rept 4
      cpl
      ld [hl+], a
    endr
    inc b
    jr nz, .clrcanvasloop

  ; Seek to start of attract mode script
  ld hl,attract_src_ptr
  ld a,low(attract_script)
  ld [hl+],a
  ld a,high(attract_script)
  ld [hl+],a

  ; Initialize the text cursor
  ld a,$81
  ld [hl+],a  ; starting tile id
  xor a  ; starting pixel within tile
  ld [hl],a
  jp vwfClearBuf

;;
; Does one-eighth of the job of clearing the VWF area.
; Appends two 32-byte +32 run packets at $880x, $881x
; @param attract_vwf_tile_id the tile ID ($80, $88, $90, ..., $B8)
attract_clear_half_line:
  ld hl,popslide_used
  ld l,[hl]
  ld a,l
  add 4 * 2
  ld [popslide_used],a

  ; Find the starting pointer
  ld a,[attract_vwf_tile_id]  ; $80, $88, $A0, ..., $B8 becomes 
  rra
  rra      ; $20, $22, $24, ..., $2E
  sub $0F  ; $11, $13, $15, ..., $1F
  ld e, a
  call .one_packet
  ld a, e
  sub $10

;;
; Private entry: Writes one run of 32
.one_packet:
  ld [hl+], a
  ld a, $88
  ld [hl+], a
  ld a, $DF  ; bit 7: +32; bit 6: run; length 31+1
  ld [hl+], a
  xor a
  ld [hl+], a
  ret

;;
; Writes the current and next VWF tile to the Popslide buffer
; @param attract_vwf_tile_id the tile number ($80-$BF); only one tile
; gets written for $xF
attract_push_vwf_tiles:
  ld hl,popslide_used
  ld l,[hl]
  ld a,[attract_vwf_tile_id]
  swap a
  ld c,a
  ld b,$0F
  cp $F0  ; If on the last tile of a line, write only one tile
  jr nc,.only_one_tile
    ld b,$1F
  .only_one_tile:
  and $F0
  ld [hl+],a  ; header: address low
  xor c
  or high(CHRRAM1)
  ld [hl+],a  ; header: address high
  ld a,b
  ld [hl+],a  ; header: length - 1
  inc l       ; skip unused header byte

  inc b  ; convert to length / 2
  srl b
  ld de,lineImgBuf
  .loop:
    ld a,$FF
    ld [hl+],a
    ld a,[de]
    inc e
    ld [hl+],a
    dec b
    jr nz,.loop

  ld a,l
  ld [popslide_used],a
  ret

;;
; Process one byte of the attract mode script.
; @return A: move to try
attract_update::
  ld a,[attract_vwf_x]
  inc a
  jr nz,.not_in_clear
    call attract_clear_half_line
    ld a,[attract_vwf_tile_id]
    add 8
    cp $C0
    jr c,.clear_have_tile_id
      ; beep if combo loss particle not visible
      ; (that is, if combo loss sound isn't playing)
      ld a, [prevcombo_timeleft]
      or a
      ld a, 12
      call z, audio_play_fx

      ld a,8
      ld [attract_vwf_x],a
      swap a  ; ld a,$80
    .clear_have_tile_id:
    ld [attract_vwf_tile_id],a
    xor a
    ret
  .not_in_clear:

  ld hl,attract_src_ptr
  ld a,[hl+]
  ld h,[hl]
  ld l,a
  ld a,[hl+]

  ; If at the end of the script, return a Start press
  or a
  jr nz,.not_end
    ld a,PADF_START
    ret
  .not_end:

  ; If at peekwait, wait for peek
  cp PEEKWAIT
  jr nz, .not_peekwait
    ld a, [roll_frame]
    or a
    jr nz, .not_known_control_character
  .not_peekwait:

  ; If not at the end, write back pointer
  ld c,a
  ld a,l
  ld [attract_src_ptr],a
  ld a,h
  ld [attract_src_ptr+1],a

  ld a,c
  or a
  ret z  ; zero left by PEEKWAIT
  cp $09
  jr nc,.not_direction
    dec c
    ld a,c
    and MOVEF_DIRECTION
    ld b,a
    ld a,$10
    jr z,.nokeyshift
    .keyshiftloop:
      rlca
      dec b
      jr nz,.keyshiftloop
    .nokeyshift:
    bit MOVEB_JUMP,c
    ret z
    inc a
    ret
  .not_direction:

  cp FIRST_PRINTABLE_CU
  jr c,.not_letter
    ld a,[attract_vwf_x]
    ld b,a
    ld a,c
    push bc  ; Stack: X and glyph ID
    call vwfPutTile
    call attract_push_vwf_tiles

    ; Move pen forward by the glyph's width
    pop bc
    ld de,vwfChrWidths-FIRST_PRINTABLE_CU
    ld a,c
    add e
    ld e,a
    adc d
    sub e
    ld d, a
    ld a,[de]
    add b

    ; See if the pen has entered a new tile
    ld bc,8
    cp c
    jr c,.letter_not_new_tile
      sub c
      ; Shift tile buffer left by 8
      push af
      ld hl,attract_vwf_tile_id
      inc [hl]
      ld hl,lineImgBuf+8
      ld de,lineImgBuf
      call memcpy
      ld c,8
      ld h,b
      call memset
      pop af
    .letter_not_new_tile:
    ld [attract_vwf_x],a
  .not_known_control_character:
    xor a
    ret
  .not_letter:

  cp LF
  jr nz,.not_linefeed
    ; Move to the next row down
    ld a,[attract_vwf_tile_id]
    and $F0
    add $11
    ld [attract_vwf_tile_id],a
    xor a
    .set_vwf_x_clear_linebuf:
    ld [attract_vwf_x],a

    ; And clear the relevant part of the line buffer
    xor a
    ld c,16
    ld hl,lineImgBuf
    jp memset_tiny
  .not_linefeed:

  cp FF
  jr nz, .not_formfeed
    ; Go to screen clearin' mode
    ld a,$80
    ld [attract_vwf_tile_id],a
    ld a,$FF
    jr .set_vwf_x_clear_linebuf
  .not_formfeed:

  cp SHOWCONTROLS
  jr z, .is_show_controls
  cp HIDESHADES
  jr z, .is_hide_shades
  cp SHOWSHADES
  jr nz, .not_known_control_character
    ld hl, attract_seq_stripe
    ld bc, attract_seq_stripe_end - attract_seq_stripe
  .push_stripe:
    ld de, popslide_used
    ld a, [de]
    ld e, a
    call memcpy
    ld a, e
    ld [popslide_used], a
    xor a
    ret

  .is_show_controls:
    ld hl, attract_controls_stripe
    ld bc, attract_controls_stripe_end - attract_controls_stripe
    jr .push_stripe
  .is_hide_shades:
    call attract_reload_vwf_nametable
    xor a
    ret

    

; Attract mode map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "attractdata", ROM0

attract_restore_attr_stripe:
 dw rVBK
 db 0, 1
 dw $9983
 db (14-1)+64, $04
 dw $99A3
 db (14-1)+64, $04
 dw $99C3
 db (14-1)+64, $04
 dw $99E3
 db (14-1)+64, $04
 dw rVBK
 db 0, 0
attract_restore_attr_stripe_end:

attract_controls_stripe:
 dw rVBK
 db 0, 1
 dw $998B
 db (4-1)+64, $00
 dw $99AB
 db (4-1)+64, $00
 dw $99CB
 db (6-1)+64, $00
 dw $99EB
 db (6-1)+64, $00
 dw rVBK
 db 0, 0
 dw $998B, 4-1
 db $0C,$1E,$0C,$0E
 dw $99AB, 4-1
 db $0D,$1F,$0D,$0F
 dw $99CB, 6-1
 db $0C,$0E,$68,$6A,$0C,$0E
 dw $99EB, 6-1
 db $0D,$0F,$69,$6B,$0D,$0F
attract_controls_stripe_end:

attract_seq_stripe:
 dw rVBK
 db 0, 1
 dw $99C3, 14-1
 db $01,$01,$04,$00,$00,$04,$02,$02,$04,$00,$00,$04,$01,$01
 dw $99E3, 14-1
 db $01,$01,$04,$00,$00,$04,$02,$02,$04,$00,$00,$04,$01,$01
 dw rVBK
 db 0, 0
 dw $99C3, 14-1
 db $00,$02,$F8,$04,$06,$F8,$08,$0A,$F8,$0C,$0E,$F8,$00,$02
 dw $99E3, 14-1
 db $01,$03,$F9,$05,$07,$F9,$09,$0B,$F9,$0D,$0F,$F9,$01,$03
attract_seq_stripe_end:

attract_map::
 db 3, 0, 0, 1  ; 4
 db 2, 2, 1, 3  ; 3
 db 0, 1, 0, 3  ; 2
 db 3, 2, 2, 1  ; 1
 ;  a  b  c  d

; This floor has 20 points and its solution is as follows:
; _____ _____ _| |__ _____
;|     |     |     |     |
;|  3 >|  0 >|  0 >| (1) |
;|__v__|__v__|__ __|__ __|
;|  ^  |     |     |     |
;|  2  |  2 >|< 1  |  3  |
;|__v__|__ __|__v__|__ __|
;|     |  ^  |  ^  |     |
;|  0 >|  1  |< 0  |< 3  |
;|__ __|__v__|__ __|__ __|
;|  ^  |     |     |     |
;|  3  |< 2  |< 2  | X1X |
;|__ __|__ __|__ __|__ __|
;
; This route is used when testing Restless. It differs from the
; attract mode route in not visiting the dead end.
; AL U AR L D  L U R U AR
; D L U AL U   R R D AD L
; AU L U AD R  U L AD U R
; U L U R AD   U L U R R
; U

; Attract mode script ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "attractscript", ROM0

; AM_constants are one greater than the underlying move code
def AM_R equ $01
def AM_L equ $02
def AM_U equ $03
def AM_D equ $04
def AM_RR equ $05
def AM_LL equ $06
def AM_UU equ $07
def AM_DD equ $08
def SHOWCONTROLS equ $0B
def HIDESHADES equ $0D
def SHOWSHADES equ $0E
def PEEKWAIT equ $0F

;;
; Bytecode format
; $00: End
; $01-$08: Move x-1
; $0A: New line
; $0C: Clear page
; $10+: Draw one VWF glyph
attract_script:
; Start at c1
; roll/jump on same color:
  db "Libbet can move 1 or 2",LF
  db "cells at once."
; b1 b3 a3 b3 b1 c1
  db AM_L, AM_UU, AM_L, AM_R, AM_DD, AM_R

; repeat same moves while explaining controls
  db FF, SHOWCONTROLS
  db DPADSYM,": Roll to",LF
  db "  next cell",LF
  db ABTNSYM,DPADSYM,": Jump",LF
  db "  over a cell"
  db AM_L, AM_UU, AM_L, AM_R, AM_DD, AM_R

; so far: 0/20 (0%)
; roll/jump on different colors:
  db FF, HIDESHADES, SHOWSHADES
  db "She moves on one shade",LF
  db "or to the next brighter.", PEEKWAIT
  db AM_L, AM_L, AM_U   ; b1 a1+ a2+
  db AM_R, AM_U, AM_RR  ; b2+ b3+ d3+
; so far: 5/20 (25%)
  db FF
  db "She leaves a track",LF
  db "when changing shades."
  db AM_D, AM_L, AM_U, AM_LL, AM_U  ; d2 c2+ c3+ a3+ a4+
  db PEEKWAIT, HIDESHADES
; so far: 9/20 (45%)

; dead ends:
  db FF
  db "Holes at dead ends",LF
  db "lead back to the start."
; b4+ d4+ [c1] a1+ a2 c2 c4+ d4 [c1]
  db AM_R, AM_RR
  db AM_LL, AM_U, AM_RR, AM_UU, AM_R
; result: 13/20 (65%)

; finish the job:
  db FF
  db "Find 90 percent of",LF
  db "possible tracks to",LF
  db "open the exit."
; a1 a2 c2 c4 c3+ c1+
  db AM_LL, AM_U, AM_RR, AM_UU, AM_D, AM_DD
; b1 b3 a3 a4 a2+ c2 b2+ b1+
  db AM_L, AM_UU, AM_L, AM_U, AM_DD, AM_RR, AM_L, AM_D
; b3 a3 a4 c4 exit
  db AM_UU, AM_L, AM_U, AM_RR, AM_U

; this gets us to 18/20 (90%)
  db $00
