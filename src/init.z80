;
; Init code for Game Boy
;
; Copyright 2018, 2020 Damian Yerrick
; 
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"
include "src/global.inc"

; Like the NES and Super NES, DMA on the Game Boy takes access to RAM
; and ROM away from the CPU.  But unlike those two, the CPU continues
; to run.  So store a tiny subroutine in HRAM (tightly coupled
; memory) to keep the CPU busy until OAM DMA is done.
section "hram_init", HRAM
run_dma:: ds 10

def STACK_SIZE EQU 64
section "stack", WRAM0, ALIGN[2]
stack_top: ds STACK_SIZE

section "bootregs", WRAM0

initial_a:: ds 1
initial_b:: ds 1

section "no_rst", ROM0[$0000]
  rept 41
    ld l, l
  endr

section "rom_init", ROM0
reset_handler::
  di  ; Disable interrupts
  ld sp, stack_top + STACK_SIZE  ; Set up stack pointer (full descending)

  ; A and B used for DMG, SGB, GB Pocket, GBC, or GBA detection.
  ; Useful for motion blur compensation, palette adjustment,
  ; music adjustment on original SGB, etc.
  ; A=01: DMG or SGB
  ; A=FF: Game Boy Pocket or SGB2
  ; A=11, B.0=0: GBC
  ; A=11, B.0=1: GBA
  ; We'll be translating that to a single hardware capability value:
  ; $00 for mono handheld, $01 for Super Game Boy,
  ; $80 for GBC, or $C0 for GBA.
  ld hl, initial_a
  ld [hl+], a
  ld [hl], b
  xor $11
  cp 1  ; Carry true if GBC or GBA, false for mono

  ; While carry is set for GBC or clear otherwise, initialize
  ; controller reading now because SGB detection uses it.
  ld a,P1F_GET_NONE
  ldh [rP1],a
  ld a, 0  ; preserve carry
  ld [cur_keys],a
  if USE_DAS
    ld [das_keys],a
    ld [das_timer],a
  endc

  ; CF: 0 for DMG/MGB, SGB/SGB2; 1 for GBC/GBA
  ; A: 0; B.0: 1 for GBA; 0 for GBC; unspecified if CF=0
  jr nc, .not_gba_check
    rr b
    ld a, $03  ; GBC: 0|03  GBA: 1|03
    rra        ; GBC: 1|01  GBA: 1|81
    rra        ; GBC: 1|80  GBA: 1|C0
    ; and carry is still set to skip the SGB detection
  .not_gba_check:
  ld [hw_capability], a
  call nc, detect_sgb
  ld a, [hw_capability]
  rrca  ; kick distance $80 for SGB or $00 otherwise
  sbc a
  and $80
  ld [r_symbol_kick_dist], a  ; kick only on boot, not A+B+Select+Start

  ; Copy the sprite DMA routine to HRAM
  ld hl,hramcode_start
  ld de,run_dma
  ld bc,hramcode_end-hramcode_start
  call memcpy

  ; Not fading the logo this time because a different effect
  ; is planned: Libbet rolling across the logo and knocking
  ; the (R) away if on mono.
  ; And because sound is used from step 1, keep the APU turned on

  if bgbcompat
    ; BGB triggers spurious "reading uninitialized WRAM" exceptions
    ; when DMAing the X, tile number, and attribute of an OAM entry
    ; whose Y is offscreen.
    xor a
    ld hl,SOAM
    ld c,160
    call memset_tiny
    ld hl,decompbuf+256
    ld c, a
    call memset_tiny
    call run_dma
  endc

  call achievements_init
  jp main

;;
; Writes BC bytes of value H starting at DE.
memset::
  ; Increment B if C is nonzero
  dec bc
  inc b
  inc c
  ld a, h
.loop:
  ld [de],a
  inc de
  dec c
  jr nz,.loop
  dec b
  jr nz,.loop
  ret

;;
; Copies BC bytes from HL to DE.
memcpy::
  ; Increment B if C is nonzero
  dec bc
  inc b
  inc c
.loop:
  ld a, [hl+]
  ld [de],a
  inc de
  dec c
  jr nz,.loop
  dec b
  jr nz,.loop
  ret

;;
; The routine gets copied to high RAM.  While OAM DMA is running,
; both ROM and WRAM are inaccessible; only HRAM is readable.
; But unlike on the NES, the CPU continues to fetch and execute
; instructions.  So a program needs to run 160 mcycles' worth of
; code from HRAM until this finishes.  Thus to present a display
; list, the program will call run_dma, not hramcode_start.
hramcode_start:
  ld a,SOAM >> 8
  ldh [rDMA],a
  ld a,40
.loop:
  dec a
  jr nz,.loop
  ret
hramcode_end:

; If we stuff these in their own sections, RGBLINK might be able to
; pack them between the unused IRQ/RST vectors, at least until we
; figure out which to make into RSTs.

section "memset_tiny",ROM0
;;
; Writes C bytes of value A starting at HL.
memset_tiny::
  ld [hl+],a
  dec c
  jr nz,memset_tiny
  ret

section "memset_inc",ROM0
;;
; Writes C bytes of value A, A+1, ..., A+C-1 starting at HL.
memset_inc::
  ld [hl+],a
  inc a
  dec c
  jr nz,memset_inc
  ret
