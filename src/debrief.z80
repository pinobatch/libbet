;
; Result screen for GB port of Magic Floor
;
; Copyright 2002, 2012 Martin Korth [concept]
; Copyright 2018, 2019 Damian Yerrick [program]
;
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"
include "src/global.inc"

section "linebuffer", WRAM0
txtbuffer:
  ds 32

section "debrief", ROM0
debrief::
  ld b, 28
  call sgb_set_palette_b
  ld b,1
  call vwf_page_init
  call audio_update

  call vwfClearBuf
  ld hl,results_msg
  ld b,0
  call vwfPuts
  ld hl,CHRRAM0 + vwf_page_first_tileid * 16
  ld bc,vwf_page_width
  call vwfPutBuf03_lenC

  ld b,0
  ; HL: Output pointer in VWF plane
  ; B: Floor number
  .floorloop:
    push hl
    push bc
    call vwfClearBuf
    ld de,floor_names
    ld a,b
    call de_index_a  ; HL: name of floor
    ld de,txtbuffer
    call stpcpy

    ; Separator
    ld a,":"
    ld [de],a
    inc de
    ld a," "
    ld [de],a
    inc de

    ; Fetch score and maximum score
    pop bc
    push bc
    push de
    ld a,b
    ld de,floor_scores
    call de_index_a
    pop de
    ; L: actual score; H: maximum score
    ld a,l
    call wr2bcd_de
    ld a,"/"
    ld [de],a
    inc de
    ld a,h
    call wr2bcd_de

    ; Separator
    ld a," "
    ld [de],a
    inc de
    ld a,"("
    ld [de],a
    inc de

    ; 100%?
    ld a,l
    cp h
    jr c,.not100
      ld a,"1"
      ld [de],a
      inc de
      xor a
    .not100:
    ; Write percentage
    ld b,a
    ld c,h
    ld h,d
    ld l,e
    call pctdigit
    or "0"
    ld [hl+],a
    call pctdigit
    or "0"
    ld [hl+],a
    ld a,"%"
    ld [hl+],a
    ld a,")"
    ld [hl+],a

    ; Terminate and write string
    xor a
    ld [hl],a
    ld hl,txtbuffer
    ld b,0
    call vwfPuts
    pop bc
    pop hl
    push bc
    ld bc,vwf_page_width
    call vwfPutBuf03_lenC
    pop bc

    ld c,NUM_ACHIEVEMENTS
    ld de,achievements_found_this_game
    ; At this point: stack is empty
    ; B: floor number
    ; C: remaining achievements
    ; DE: pointer to current achievement earned
    ; HL: pointer into VWF canvas
    .ach_loop:
      ld a,[de]
      cp b  ; If the achievement wasn't earned here, don't print it
      jr nz,.ach_continue
        push de
        push bc
        push hl
        call vwfClearBuf

        ; Print up name of achievement that DE points to
        ld a,e
        sub LOW(achievements_found_this_game)  ; A = achievement ID
        ld de,achievement_names
        call de_index_a
        ld b,8
        call vwfPuts

        pop hl
        ld bc,vwf_page_width
        call vwfPutBuf03_lenC
        pop bc
        pop de
      .ach_continue:
      inc de
      dec c
      jr nz,.ach_loop

    ; Move to next floor
    inc b
    ld a,b
    cp NUM_FLOORS
    jp c,.floorloop

  push hl
  call vwfClearBuf
  pop hl
  ld bc,vwf_page_width
  call vwfPutBuf03_lenC
  push hl
  call vwfClearBuf
  ld hl,press_start_msg
  ld b,0
  call vwfPuts
  pop hl
  ld bc,vwf_page_width
  call vwfPutBuf03_lenC

  ld a,LCDCF_ON|LCDCF_BGON|LCDCF_BG8800|LCDCF_BG9800
  ld [vblank_lcdc_value],a
  ldh [rLCDC],a

.waitloop:
  call wait_vblank_irq
  call audio_update
  call read_pad
  ld a,[new_keys]
  and PADF_A|PADF_START
  jr z,.waitloop
  ret

wr2bcd_de:
  call bcd8bit_baa
  ld c,a
  swap a
  call wr1_de
  ld a,c
  fallthrough wr1_de
wr1_de:
  and $0F
  or "0"
  ld [de],a
  inc de
  ret

; If you get an error about scope, upgrade to RGBDS 0.7 or later
stpcpy.continue:
  inc de
;;
; Copies from HL to DE, stopping at a $00 byte
; @param HL source
; @param DE destination
; @return A = 0; DE = pointer to final NUL
stpcpy::
  ld a,[hl+]
  ld [de],a
  or a
  jr nz, .continue
  ret

results_msg: db "Results",0
floor_names:
  dw floor0_name
  dw floor1_name, floor2_name, floor3_name, floor4_name, floor5_name
floor0_name: db "Closet", 0
floor1_name: db "Corridor",0
floor2_name: db "Anteroom",0
floor3_name: db "Abcde6x4",0
floor4_name: db "Fghij6x6",0
floor5_name: db "Klmno8x6",0
press_start_msg: db "Press Start",0
